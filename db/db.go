// Code generated by sqlc. DO NOT EDIT.

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.deleteCommentStmt, err = db.PrepareContext(ctx, deleteComment); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteComment: %w", err)
	}
	if q.deletePostStmt, err = db.PrepareContext(ctx, deletePost); err != nil {
		return nil, fmt.Errorf("error preparing query DeletePost: %w", err)
	}
	if q.deleteSubscribtionStmt, err = db.PrepareContext(ctx, deleteSubscribtion); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteSubscribtion: %w", err)
	}
	if q.insertCommentStmt, err = db.PrepareContext(ctx, insertComment); err != nil {
		return nil, fmt.Errorf("error preparing query InsertComment: %w", err)
	}
	if q.insertPostStmt, err = db.PrepareContext(ctx, insertPost); err != nil {
		return nil, fmt.Errorf("error preparing query InsertPost: %w", err)
	}
	if q.insertRevokedTokenStmt, err = db.PrepareContext(ctx, insertRevokedToken); err != nil {
		return nil, fmt.Errorf("error preparing query InsertRevokedToken: %w", err)
	}
	if q.insertSubscribtionStmt, err = db.PrepareContext(ctx, insertSubscribtion); err != nil {
		return nil, fmt.Errorf("error preparing query InsertSubscribtion: %w", err)
	}
	if q.insertUserStmt, err = db.PrepareContext(ctx, insertUser); err != nil {
		return nil, fmt.Errorf("error preparing query InsertUser: %w", err)
	}
	if q.selectAllCommentsStmt, err = db.PrepareContext(ctx, selectAllComments); err != nil {
		return nil, fmt.Errorf("error preparing query SelectAllComments: %w", err)
	}
	if q.selectAllPostsStmt, err = db.PrepareContext(ctx, selectAllPosts); err != nil {
		return nil, fmt.Errorf("error preparing query SelectAllPosts: %w", err)
	}
	if q.selectAllSubscribtionsStmt, err = db.PrepareContext(ctx, selectAllSubscribtions); err != nil {
		return nil, fmt.Errorf("error preparing query SelectAllSubscribtions: %w", err)
	}
	if q.selectAllUsersStmt, err = db.PrepareContext(ctx, selectAllUsers); err != nil {
		return nil, fmt.Errorf("error preparing query SelectAllUsers: %w", err)
	}
	if q.selectCommentsByPostStmt, err = db.PrepareContext(ctx, selectCommentsByPost); err != nil {
		return nil, fmt.Errorf("error preparing query SelectCommentsByPost: %w", err)
	}
	if q.selectRevokedTokenStmt, err = db.PrepareContext(ctx, selectRevokedToken); err != nil {
		return nil, fmt.Errorf("error preparing query SelectRevokedToken: %w", err)
	}
	if q.selectUserByIDStmt, err = db.PrepareContext(ctx, selectUserByID); err != nil {
		return nil, fmt.Errorf("error preparing query SelectUserByID: %w", err)
	}
	if q.selectUserByUsernameStmt, err = db.PrepareContext(ctx, selectUserByUsername); err != nil {
		return nil, fmt.Errorf("error preparing query SelectUserByUsername: %w", err)
	}
	if q.selectUserSubscribersStmt, err = db.PrepareContext(ctx, selectUserSubscribers); err != nil {
		return nil, fmt.Errorf("error preparing query SelectUserSubscribers: %w", err)
	}
	if q.selectUserSubscribtionsStmt, err = db.PrepareContext(ctx, selectUserSubscribtions); err != nil {
		return nil, fmt.Errorf("error preparing query SelectUserSubscribtions: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.deleteCommentStmt != nil {
		if cerr := q.deleteCommentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCommentStmt: %w", cerr)
		}
	}
	if q.deletePostStmt != nil {
		if cerr := q.deletePostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deletePostStmt: %w", cerr)
		}
	}
	if q.deleteSubscribtionStmt != nil {
		if cerr := q.deleteSubscribtionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteSubscribtionStmt: %w", cerr)
		}
	}
	if q.insertCommentStmt != nil {
		if cerr := q.insertCommentStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertCommentStmt: %w", cerr)
		}
	}
	if q.insertPostStmt != nil {
		if cerr := q.insertPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertPostStmt: %w", cerr)
		}
	}
	if q.insertRevokedTokenStmt != nil {
		if cerr := q.insertRevokedTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertRevokedTokenStmt: %w", cerr)
		}
	}
	if q.insertSubscribtionStmt != nil {
		if cerr := q.insertSubscribtionStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertSubscribtionStmt: %w", cerr)
		}
	}
	if q.insertUserStmt != nil {
		if cerr := q.insertUserStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing insertUserStmt: %w", cerr)
		}
	}
	if q.selectAllCommentsStmt != nil {
		if cerr := q.selectAllCommentsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing selectAllCommentsStmt: %w", cerr)
		}
	}
	if q.selectAllPostsStmt != nil {
		if cerr := q.selectAllPostsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing selectAllPostsStmt: %w", cerr)
		}
	}
	if q.selectAllSubscribtionsStmt != nil {
		if cerr := q.selectAllSubscribtionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing selectAllSubscribtionsStmt: %w", cerr)
		}
	}
	if q.selectAllUsersStmt != nil {
		if cerr := q.selectAllUsersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing selectAllUsersStmt: %w", cerr)
		}
	}
	if q.selectCommentsByPostStmt != nil {
		if cerr := q.selectCommentsByPostStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing selectCommentsByPostStmt: %w", cerr)
		}
	}
	if q.selectRevokedTokenStmt != nil {
		if cerr := q.selectRevokedTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing selectRevokedTokenStmt: %w", cerr)
		}
	}
	if q.selectUserByIDStmt != nil {
		if cerr := q.selectUserByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing selectUserByIDStmt: %w", cerr)
		}
	}
	if q.selectUserByUsernameStmt != nil {
		if cerr := q.selectUserByUsernameStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing selectUserByUsernameStmt: %w", cerr)
		}
	}
	if q.selectUserSubscribersStmt != nil {
		if cerr := q.selectUserSubscribersStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing selectUserSubscribersStmt: %w", cerr)
		}
	}
	if q.selectUserSubscribtionsStmt != nil {
		if cerr := q.selectUserSubscribtionsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing selectUserSubscribtionsStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                          DBTX
	tx                          *sql.Tx
	deleteCommentStmt           *sql.Stmt
	deletePostStmt              *sql.Stmt
	deleteSubscribtionStmt      *sql.Stmt
	insertCommentStmt           *sql.Stmt
	insertPostStmt              *sql.Stmt
	insertRevokedTokenStmt      *sql.Stmt
	insertSubscribtionStmt      *sql.Stmt
	insertUserStmt              *sql.Stmt
	selectAllCommentsStmt       *sql.Stmt
	selectAllPostsStmt          *sql.Stmt
	selectAllSubscribtionsStmt  *sql.Stmt
	selectAllUsersStmt          *sql.Stmt
	selectCommentsByPostStmt    *sql.Stmt
	selectRevokedTokenStmt      *sql.Stmt
	selectUserByIDStmt          *sql.Stmt
	selectUserByUsernameStmt    *sql.Stmt
	selectUserSubscribersStmt   *sql.Stmt
	selectUserSubscribtionsStmt *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                          tx,
		tx:                          tx,
		deleteCommentStmt:           q.deleteCommentStmt,
		deletePostStmt:              q.deletePostStmt,
		deleteSubscribtionStmt:      q.deleteSubscribtionStmt,
		insertCommentStmt:           q.insertCommentStmt,
		insertPostStmt:              q.insertPostStmt,
		insertRevokedTokenStmt:      q.insertRevokedTokenStmt,
		insertSubscribtionStmt:      q.insertSubscribtionStmt,
		insertUserStmt:              q.insertUserStmt,
		selectAllCommentsStmt:       q.selectAllCommentsStmt,
		selectAllPostsStmt:          q.selectAllPostsStmt,
		selectAllSubscribtionsStmt:  q.selectAllSubscribtionsStmt,
		selectAllUsersStmt:          q.selectAllUsersStmt,
		selectCommentsByPostStmt:    q.selectCommentsByPostStmt,
		selectRevokedTokenStmt:      q.selectRevokedTokenStmt,
		selectUserByIDStmt:          q.selectUserByIDStmt,
		selectUserByUsernameStmt:    q.selectUserByUsernameStmt,
		selectUserSubscribersStmt:   q.selectUserSubscribersStmt,
		selectUserSubscribtionsStmt: q.selectUserSubscribtionsStmt,
	}
}
